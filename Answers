CRUD Quiz

Use the solution to this afternoon's Property Tracker lab to answer the following questions. Please write your answers under each question, push the file to GitHub, and submit in the usual way.

MVP Questions

In our Property Tracker application:

Q1. Where are we instantiating instances of the Property class?

A1 In the console.rb script

Q2. Where are we defining the SQL that enables us to save the ruby Property object into the database?

A2 In the properties.sql file

Q3. In console.rb, which lines modify the database?

A3 4, 13, 22, 31, 33 all perform methods which modify the database

Q4. Why do we not define the id of a Property object at the point we instantiate it (‘new it up’)?

A4 Because at that point the object does not exist in relation to our database, and it is the databases job to keep track of the ids. We could keep track ourselves, but it would be redundant, considering the database will do it for us.

Q5. Where and how do we assign the id (that is generated by the database) to the ruby Property object?

A5 In the save method in the Property.rb file. We assign the id to the object by returning the id back when we create the database entry, and setting the return of the exec_prepared function to the local object id variable

Q6. Why do we put a guard (an if clause) on the @id attribute in the constructor?

A6 Because if we did not, when we first construct a new property object, it would be looking for a key that does not exist in the incoming options hash.

Q7. Why are some of the CRUD actions represented by instance methods, and others by class methods?

A7 Any action that affects only the specific object instance is created as an instance method, while any action that needs to affect multiple objects should not belong to an instance of the class, but the class itself.

Q8. What type of data structure is returned by calls to db.exec_prepared()? In the save method, how do we access the id from the returned data structure?

A8 A PG::Result object is returned, which is superficially like an array. We access the id by accessing the 0th position in that object, and then asking for the value associated with the 'id' key.

Q9. Why do we use prepared statements when performing database operations?

A9 We use prepared statements to parse the text of the inputs, so that any malicious sql code that may have been inserted into those inputs will be treated as a string and not run.

Extension Questions

Look at the find_by_id and find_by_address methods in the Property class.

Q10. What do they take in as their arguments?

A10 find_by_id takes in an numbered id, and find_by_address takes in an address string

Q11. What are their return values?

A11 They return an instance of the property class


As an aside, when we tried to write similar code, we were getting an error when using an id or address that wasn't in the table. We fixed it by returning nil if results_array.count == 0
